import os
import requests
import logging
from datetime import datetime

class TelegramNotifier:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.enabled = bool(self.bot_token and self.chat_id)

        if self.enabled:
            print("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã)")

    def send_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }

            response = requests.post(url, json=payload, timeout=10)
            return response.status_code == 200

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

    def notify_new_review(self, review_data: dict, reply_text: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤"""
        if not self.enabled:
            return

        rating_emojis = "‚≠ê" * review_data['rating']
        message = f"""
üìù <b>–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {review_data['user_name'] or '–ê–Ω–æ–Ω–∏–º'}
‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {rating_emojis} ({review_data['rating']}/5)
üè∑Ô∏è <b>–¢–æ–≤–∞—Ä:</b> {review_data['product_name']}

üí¨ <b>–û—Ç–∑—ã–≤:</b>
{review_data['text'][:200]}{'...' if len(review_data['text']) > 200 else ''}

ü§ñ <b>–û—Ç–≤–µ—Ç –±–æ—Ç–∞:</b>
{reply_text[:300]}{'...' if len(reply_text) > 300 else ''}

üïí <b>–í—Ä–µ–º—è:</b> {review_data['time']}
        """.strip()

        self.send_message(message)

def notify_daily_statistics(self, stats: dict):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not self.enabled:
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [
        "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Wildberries Bot</b>",
        f"",
        f"üìÖ <b>–î–∞—Ç–∞:</b> {stats.get('date', '')}"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if stats.get('checks_today') != 'N/A':
        message_parts.append(f"üîÑ <b>–ü—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –¥–µ–Ω—å:</b> {stats.get('checks_today', 0)}")

    if stats.get('reviews_processed') != 'N/A':
        message_parts.append(f"üìù <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {stats.get('reviews_processed', 0)}")

    if stats.get('replies_sent') != 'N/A':
        message_parts.append(f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤:</b> {stats.get('replies_sent', 0)}")

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ API WB
    message_parts.extend([
        f"‚≠êÔ∏è <b>–¢–µ–∫—É—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {stats.get('avg_rating', 'N/A')}",
        f"",
        f"üìà <b>–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:</b> {stats.get('unanswered', 0)}",
        f"üìã <b>–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {stats.get('new_today', 0)}",
        f""
    ])

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if stats.get('unanswered', 0) == 0:
        message_parts.append("üéâ <b>–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</b>")
    else:
        message_parts.append("‚ö†Ô∏è <b>–ï—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã</b>")

    message = "\n".join(message_parts)
    self.send_message(message)

    def notify_error(self, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.enabled:
            return

        message = f"""
üö® <b>–û—à–∏–±–∫–∞ Wildberries Bot</b>

‚ùå <b>–û—à–∏–±–∫–∞:</b>
{error_message}

üÜò <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞!</b>
        """.strip()

        self.send_message(message)
