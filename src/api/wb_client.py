import requests
import time
from typing import List, Dict, Any
from .rate_limiter import RateLimiter
from .models import WBReview
from src.config.settings import settings
from src.config.constants import *

class WBAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Wildberries"""

    def __init__(self, test_mode: bool = False):
        self.test_mode = test_mode
        self.base_url = settings.WB_BASE_URL
        self.headers = {
            "Authorization": settings.WB_API_KEY,
            "Content-Type": "application/json"
        }
        self.rate_limiter = RateLimiter(delay=settings.REQUEST_DELAY)

    def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API"""
        if self.test_mode:
            return {"error": False, "data": None}

        self.rate_limiter.wait_if_needed()

        url = f"{self.base_url}/{endpoint}"

        try:
            response = requests.request(method, url, headers=self.headers, **kwargs)

            if response.status_code == HTTP_UNAUTHORIZED:
                print("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return {"error": True, "errorText": "Unauthorized"}

            if response.status_code == HTTP_TOO_MANY_REQUESTS:
                print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º...")
                time.sleep(1)
                return self._make_request(method, endpoint, **kwargs)

            response.raise_for_status()

            if response.status_code == 204:
                return {"error": False, "data": None}

            return response.json()

        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error": True, "errorText": str(e)}
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"error": True, "errorText": str(e)}

    def has_unseen_feedbacks(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        if self.test_mode:
            print("üîß –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ï—Å—Ç—å –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")
            return True

        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
        result = self._make_request("GET", "new-feedbacks-questions")

        if result.get("error"):
            return False

        data = result.get("data", {})
        has_new_feedbacks = data.get("hasNewFeedbacks", False)

        print(f"üìä –ù–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {'–ï–°–¢–¨' if has_new_feedbacks else '–Ω–µ—Ç'}")
        return has_new_feedbacks

    def get_unanswered_reviews(self) -> List[WBReview]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        if self.test_mode:
            return self._get_test_reviews()

        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...")

        params = {
            "isAnswered": False,
            "take": 50,
            "skip": 0,
            "order": "dateDesc"
        }

        result = self._make_request("GET", "feedbacks", params=params)

        if result.get("error"):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {result.get('errorText')}")
            return []

        data = result.get("data", {})
        feedbacks_data = data.get("feedbacks", [])

        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(feedbacks_data)} –æ—Ç–∑—ã–≤–æ–≤")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for i, feedback in enumerate(feedbacks_data):
            has_text = bool(feedback.get('text', '').strip())
            has_pros = bool(feedback.get('pros', '').strip())
            has_cons = bool(feedback.get('cons', '').strip())
            is_answered = feedback.get('answered', True)

            print(f"   {i+1}. ID: {feedback.get('id', 'N/A')}")
            print(f"      –¢–µ–∫—Å—Ç: {'‚úÖ –ï—Å—Ç—å' if has_text else '‚ùå –ù–µ—Ç'}")
            print(f"      Pros: {'‚úÖ –ï—Å—Ç—å' if has_pros else '‚ùå –ù–µ—Ç'}")
            print(f"      Cons: {'‚úÖ –ï—Å—Ç—å' if has_cons else '‚ùå –ù–µ—Ç'}")
            print(f"      –û—Ç–≤–µ—á–µ–Ω: {'‚úÖ –î–∞' if is_answered else '‚ùå –ù–µ—Ç'}")
            print(f"      –†–µ–π—Ç–∏–Ω–≥: {feedback.get('productValuation', 'N/A')}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            if has_text:
                print(f"      –¢–µ–∫—Å—Ç: {feedback.get('text', '')[:50]}...")
            if has_pros:
                print(f"      Pros: {feedback.get('pros', '')[:50]}...")
            if has_cons:
                print(f"      Cons: {feedback.get('cons', '')[:50]}...")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã —Å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º (text, pros –∏–ª–∏ cons)
        reviews = [WBReview(item) for item in feedbacks_data
                if (item.get('text') and len(item.get('text', '').strip()) > 3)
                or (item.get('pros') and len(item.get('pros', '').strip()) > 3)
                or (item.get('cons') and len(item.get('cons', '').strip()) > 3)]

        print(f"üì• –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(reviews)} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º/pros/cons")
        return reviews

    def post_reply_to_review(self, review_id: str, reply_text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤"""
        if self.test_mode:
            print(f"üîß –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review_id}")
            print(f"üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {reply_text}")
            print("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
            return True

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ {review_id}...")

        payload = {
            "id": review_id,
            "text": reply_text[:5000]
        }

        result = self._make_request("POST", "feedbacks/answer", json=payload)

        if result.get("error"):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {result.get('errorText')}")
            return False

        print(f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ—Ç–∑—ã–≤ {review_id}")
        return True

    def get_unanswered_count(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        if self.test_mode:
            return {
                "countUnanswered": 1,
                "countUnansweredToday": 1,
                "valuation": "4.5",
                "feedbacksCount": 1,
                "questionsCount": 0
            }

        try:
            print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            result = self._make_request("GET", "feedbacks/count-unanswered")

            if result.get("error"):
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result.get('errorText')}")
                return {
                    "countUnanswered": 0,
                    "countUnansweredToday": 0,
                    "valuation": "N/A"
                }

            data = result.get("data", {})

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            unanswered = data.get('countUnanswered', 0)
            today = data.get('countUnansweredToday', 0)
            valuation = data.get('valuation', 'N/A')

            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {unanswered} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö, {today} –Ω–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è")

            return data

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "countUnanswered": 0,
                "countUnansweredToday": 0,
                "valuation": "N/A"
            }

    def _get_test_reviews(self) -> List[WBReview]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã"""
        test_data = [
            {
                "id": "test_review_1",
                "text": "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä! –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ã—Å–æ—Ç–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è.",
                "productDetails": {"productName": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1"},
                "createdDate": "2024-01-01",
                "answered": False,
                "productValuation": 5,
                "wasViewed": False,
                "pros": "–ö–∞—á–µ—Å—Ç–≤–æ, –¥–æ—Å—Ç–∞–≤–∫–∞",
                "cons": "",
                "userName": "–ê–Ω–Ω–∞"
            },
            {
                "id": "test_review_2",
                "text": "",
                "productDetails": {"productName": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2"},
                "createdDate": "2024-01-01",
                "answered": False,
                "productValuation": 5,
                "wasViewed": True,
                "pros": "–ö—Ä–∞—Å–∏–≤—ã–π —Å–∞—Ä–∞—Ñ–∞–Ω, –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "cons": "",
                "userName": "–ê–Ω–∞—Å—Ç–∞—Å–∏—è"
            }
        ]
        return [WBReview(item) for item in test_data]
