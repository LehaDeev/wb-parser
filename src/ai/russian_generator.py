"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö AI API
"""

import requests
import json
import time
from typing import Optional
from src.config.providers import AIProvider, PROVIDER_CONFIGS
from src.ai.templates import get_fallback_response, replace_name_placeholder
from src.config.settings import settings

class RussianAIGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""

    def __init__(self):
        self.providers = self._initialize_providers()
        self.current_provider = None
        self.fallback_generator = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        self._select_provider()

    def _initialize_providers(self) -> dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
        providers = {}

        # Yandex GPT
        if hasattr(settings, 'YANDEX_API_KEY') and settings.YANDEX_API_KEY:
            providers[AIProvider.YANDEX_GPT] = {
                'config': PROVIDER_CONFIGS[AIProvider.YANDEX_GPT],
                'api_key': settings.YANDEX_API_KEY,
                'folder_id': getattr(settings, 'YANDEX_FOLDER_ID', '')
            }

        # GigaChat
        if hasattr(settings, 'GIGACHAT_API_KEY') and settings.GIGACHAT_API_KEY:
            providers[AIProvider.GIGA_CHAT] = {
                'config': PROVIDER_CONFIGS[AIProvider.GIGA_CHAT],
                'api_key': settings.GIGACHAT_API_KEY
            }

        # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω fallback
        providers[AIProvider.FALLBACK] = {
            'config': PROVIDER_CONFIGS[AIProvider.FALLBACK]
        }

        return providers

    def _select_provider(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for provider in [AIProvider.YANDEX_GPT, AIProvider.GIGA_CHAT]:
            if provider in self.providers:
                if self._test_provider(provider):
                    self.current_provider = provider
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.providers[provider]['config']['name']}")
                    return

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        self.current_provider = AIProvider.FALLBACK
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–≤—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")

    def _test_provider(self, provider: AIProvider) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        try:
            test_prompt = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            response = self._make_request(provider, test_prompt)
            return response is not None and len(response) > 0
        except:
            return False

    def _make_request(self, provider: AIProvider, prompt: str) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        provider_config = self.providers[provider]
        config = provider_config['config']

        try:
            if provider == AIProvider.YANDEX_GPT:
                return self._call_yandex_gpt(provider_config, prompt)
            elif provider == AIProvider.GIGA_CHAT:
                return self._call_gigachat(provider_config, prompt)
            else:
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {config['name']}: {e}")
            return None

    def _call_yandex_gpt(self, provider_config: dict, prompt: str) -> Optional[str]:
        """–í—ã–∑—ã–≤–∞–µ—Ç Yandex GPT API"""
        url = provider_config['config']['base_url']

        headers = {
            "Authorization": f"Api-Key {provider_config['api_key']}",
            "Content-Type": "application/json"
        }

        data = {
            "modelUri": f"gpt://{provider_config['folder_id']}/{provider_config['config']['model']}",
            "completionOptions": {
                "stream": False,
                "temperature": provider_config['config']['temperature'],
                "maxTokens": provider_config['config']['max_tokens']
            },
            "messages": [
                {
                    "role": "system",
                    "text": "–¢—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É."
                },
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }

        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()

        result = response.json()
        return result['result']['alternatives'][0]['message']['text']

    def _call_gigachat(self, provider_config: dict, prompt: str) -> Optional[str]:
        """–í—ã–∑—ã–≤–∞–µ—Ç GigaChat API"""
        url = provider_config['config']['base_url']

        # –î–ª—è GigaChat –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å access token
        access_token = self._get_gigachat_token(provider_config['api_key'])
        if not access_token:
            return None

        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

        data = {
            "model": provider_config['config']['model'],
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": provider_config['config']['max_tokens'],
            "temperature": provider_config['config']['temperature']
        }

        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()

        result = response.json()
        return result['choices'][0]['message']['content']

    def _get_gigachat_token(self, api_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è GigaChat"""
        try:
            url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

            headers = {
                "Authorization": f"Basic {api_key}",
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }

            data = {
                "scope": "GIGACHAT_API_PERS"
            }

            response = requests.post(url, headers=headers, data=data, timeout=30)
            response.raise_for_status()

            result = response.json()
            return result['access_token']
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
            return None

    def generate_reply(self, review_text: str, product_name: str = "",
                      rating: int = 5, user_name: str = "",
                      pros: str = "", cons: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤"""

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self._build_prompt(review_text, product_name, rating, user_name, pros, cons)

        # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if self.current_provider != AIProvider.FALLBACK:
            print(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ {self.providers[self.current_provider]['config']['name']}...")
            response = self._make_request(self.current_provider, prompt)

            if response:
                final_response = replace_name_placeholder(response, user_name)
                print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {final_response[:80]}...")
                return final_response
            else:
                print("üîÑ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                self._try_next_provider()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return get_fallback_response(rating, user_name)

    def _try_next_provider(self):
        """–ü—Ä–æ–±—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        current_index = list(self.providers.keys()).index(self.current_provider)
        next_providers = list(self.providers.keys())[current_index + 1:]

        for provider in next_providers:
            if provider != AIProvider.FALLBACK and self._test_provider(provider):
                self.current_provider = provider
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {self.providers[provider]['config']['name']}")
                return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        self.current_provider = AIProvider.FALLBACK
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")

    def _build_prompt(self, review_text: str, product_name: str, rating: int,
                     user_name: str, pros: str, cons: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""

        review_info = []
        if product_name:
            review_info.append(f"–¢–æ–≤–∞—Ä: {product_name}")
        if pros:
            review_info.append(f"–ü–ª—é—Å—ã: {pros}")
        if cons:
            review_info.append(f"–ú–∏–Ω—É—Å—ã: {cons}")

        review_context = "\n".join(review_info) if review_info else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        name_context = f"–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {user_name}" if user_name else "–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        return f"""
        –û—Ç–∑—ã–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: "{review_text}"

        –†–µ–π—Ç–∏–Ω–≥: {rating}/5
        {review_context}
        {name_context}

        –°–æ—Å—Ç–∞–≤—å –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
        - –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –æ—Ç–∑—ã–≤
        - –£–ø–æ–º–∏–Ω–∞–π –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å –æ—Ç–∑—ã–≤–∞
        - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
        - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ

        –û—Ç–≤–µ—Ç:
        """
