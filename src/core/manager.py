import time
from datetime import datetime
from src.api.wb_client import WBAPIClient
from src.ai.generator import AIGenerator
from .processor import ReviewProcessor
from src.utils.telegram_notifier import TelegramNotifier

class ResponseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""

    def __init__(self, test_mode: bool = False):
        self.test_mode = test_mode
        self.wb_client = WBAPIClient(test_mode=test_mode)
        self.ai_generator = AIGenerator(test_mode=test_mode)
        self.processor = ReviewProcessor(self.ai_generator)
        self.telegram = TelegramNotifier()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        self.daily_stats = {
            'checks_count': 0,
            'reviews_processed': 0,
            'replies_sent': 0,
            'last_check_date': datetime.now().date()
        }

    def process_new_reviews(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã"""
        print("\n" + "="*60)
        print(f"üïí –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
        print(f"üîß –†–µ–∂–∏–º: {'–¢–ï–°–¢–û–í–´–ô' if self.test_mode else '–†–ê–ë–û–ß–ò–ô'}")
        print("="*60)

        start_time = datetime.now()
        current_date = datetime.now().date()

        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if current_date != self.daily_stats['last_check_date']:
            self._send_daily_report()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
            self.daily_stats = {
                'checks_count': 0,
                'reviews_processed': 0,
                'replies_sent': 0,
                'last_check_date': current_date
            }

        self.daily_stats['checks_count'] += 1

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            wb_stats = {}
            if not self.test_mode:
                wb_stats = self.wb_client.get_unanswered_count()
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wb_stats.get('countUnanswered', 0)} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                print(f"üìä –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {wb_stats.get('countUnansweredToday', 0)}")
                print(f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {wb_stats.get('valuation', 'N/A')}")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
            reviews = self.wb_client.get_unanswered_reviews()

            if not reviews:
                print("üì≠ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
            results = self.processor.process_reviews(reviews)
            self.daily_stats['reviews_processed'] += len(reviews)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            sent_count = self._send_replies(results)
            self.daily_stats['replies_sent'] += sent_count

            print(f"\nüìä –ò–¢–û–ì–û: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {sent_count} –∏–∑ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            print(f"üí• {error_msg}")
            self.telegram.notify_error(error_msg)

    def _send_replies(self, results: list) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤ Telegram"""
        sent_count = 0

        for result in results:
            if result["success"] and not self.test_mode:
                time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

                success = self.wb_client.post_reply_to_review(
                    result["review"].id,
                    result["reply"]
                )

                if success:
                    sent_count += 1
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ {result['review'].id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ö–ê–ñ–î–û–ú –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ
                    review_data = {
                    'user_name': result['review'].user_name,
                    'rating': result['review'].rating,
                    'product_name': result['review'].product_name,
                    'text': result['review'].review_text,
                    'time': datetime.now().strftime('%H:%M:%S')
                }
                    self.telegram.notify_new_review(review_data, result["reply"])

                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ {result['review'].id}")

        return sent_count

    def _send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if self.test_mode or not self.telegram.enabled:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
            wb_stats = self.wb_client.get_unanswered_count()

            daily_stats = {
                'date': self.daily_stats['last_check_date'].strftime('%d.%m.%Y'),
                'checks_today': self.daily_stats['checks_count'],
                'reviews_processed': self.daily_stats['reviews_processed'],
                'replies_sent': self.daily_stats['replies_sent'],
                'unanswered': wb_stats.get('countUnanswered', 0),
                'new_today': wb_stats.get('countUnansweredToday', 0),
                'avg_rating': wb_stats.get('valuation', 'N/A')
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ –¥–µ–Ω—å
            if self.daily_stats['checks_count'] > 0:
                self.telegram.notify_daily_statistics(daily_stats)
                print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {daily_stats['date']}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if not self.test_mode:
            self._send_daily_report()
