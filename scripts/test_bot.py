#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Wildberries Feedback Bot
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(__file__) + '/..')

try:
    from src.api.wb_client import WBAPIClient
    from src.ai.generator import AIGenerator
    from src.core.manager import ResponseManager
    from src.core.processor import ReviewProcessor
    from src.config.settings import settings
    print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

def print_test_section(title, emoji="üß™"):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{emoji} {title}")
    print("‚îÄ" * 60)

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Wildberries"""
    print_test_section("–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö API", "üåê")

    client = WBAPIClient(test_mode=False)

    tests = [
        ("–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", lambda: client.has_unseen_feedbacks()),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", lambda: client.get_unanswered_count()),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤", lambda: client.get_unanswered_reviews()),
    ]

    all_passed = True

    for test_name, test_func in tests:
        try:
            print(f"üîç {test_name}...")
            result = test_func()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {type(result).__name__}")
            all_passed = all_passed and True
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            all_passed = False

    return all_passed

def test_ai_generator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò"""
    print_test_section("–¢–ï–°–¢ –ò–ò –ì–ï–ù–ï–†–ê–¢–û–†–ê", "ü§ñ")

    ai = AIGenerator(test_mode=False)

    test_cases = [
        {
            "name": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –∏–º–µ–Ω–µ–º",
            "review": "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä! –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—ã—Å–æ—Ç–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è.",
            "rating": 5,
            "user_name": "–ê–Ω–Ω–∞",
            "product": "–§—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–∫–æ–≤–∞—è"
        },
        {
            "name": "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤",
            "review": "–¢–æ–≤–∞—Ä –ø—Ä–∏—à–µ–ª —Å –¥–µ—Ñ–µ–∫—Ç–æ–º, –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω –∫–∞—á–µ—Å—Ç–≤–æ–º.",
            "rating": 2,
            "user_name": "–ò–≤–∞–Ω",
            "product": "–ù–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ"
        },
        {
            "name": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –±–µ–∑ –∏–º–µ–Ω–∏",
            "review": "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –∑–∞ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏, –Ω–æ –µ—Å—Ç—å –Ω–µ–¥–æ—á–µ—Ç—ã.",
            "rating": 3,
            "user_name": "",
            "product": "–ß–µ—Ö–æ–ª –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        },
        {
            "name": "–û—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤",
            "review": "–£–∂–∞—Å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –¢–æ–≤–∞—Ä —Å–ª–æ–º–∞–ª—Å—è —á–µ—Ä–µ–∑ –¥–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
            "rating": 1,
            "user_name": "–ú–∞—Ä–∏—è",
            "product": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞"
        },
        {
            "name": "–û—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤",
            "review": "–ü—Ä–æ—Å—Ç–æ –≤–æ—Å—Ç–æ—Ä–≥! –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è!",
            "rating": 5,
            "user_name": "–î–º–∏—Ç—Ä–∏–π",
            "product": "–£–º–Ω—ã–µ —á–∞—Å—ã"
        }
    ]

    all_passed = True

    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"   üí¨ –û—Ç–∑—ã–≤: {test_case['review']}")
        print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {test_case['rating']}/5")
        print(f"   üë§ –ò–º—è: '{test_case['user_name']}'")
        print(f"   üè∑Ô∏è  –¢–æ–≤–∞—Ä: {test_case['product']}")

        try:
            start_time = time.time()
            response = ai.generate_reply(
                review_text=test_case['review'],
                product_name=test_case['product'],
                rating=test_case['rating'],
                user_name=test_case['user_name']
            )
            response_time = time.time() - start_time

            print(f"   ‚úÖ –û—Ç–≤–µ—Ç ({response_time:.2f} —Å–µ–∫): {response}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
            if not response or len(response.strip()) < 10:
                print("   ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
                all_passed = False
            elif "[–û–®–ò–ë–ö–ê]" in response:
                print("   ‚ùå –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É")
                all_passed = False
            else:
                print("   ‚úÖ –û—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            all_passed = False

    return all_passed

def test_review_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤"""
    print_test_section("–¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –û–¢–ó–´–í–û–í", "‚öôÔ∏è")

    ai = AIGenerator(test_mode=True)  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    processor = ReviewProcessor(ai)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
    test_reviews = []
    for i in range(3):
        test_reviews.append(type('MockReview', (), {
            'id': f'test_review_{i}',
            'text': f'–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ {i} —Å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º',
            'product_name': f'–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i}',
            'rating': 4 if i % 2 == 0 else 3,
            'user_name': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}',
            'pros': '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ' if i % 2 == 0 else '',
            'cons': '' if i % 2 == 0 else '–ù–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã',
            'has_text': True
        })())

    print(f"üì• –°–æ–∑–¥–∞–Ω–æ {len(test_reviews)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        results = processor.process_reviews(test_reviews)

        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(results)}")

        for i, result in enumerate(results, 1):
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"   {status} –û—Ç–∑—ã–≤ {i}: {result['review'].id} -> {len(result['reply'])} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        for review in test_reviews:
            if review.id in processor.processed_ids:
                print(f"   ‚úÖ –û—Ç–∑—ã–≤ {review.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
            else:
                print(f"   ‚ùå –û—Ç–∑—ã–≤ {review.id} –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
                return False

        return len(results) == len(test_reviews)

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def test_response_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤"""
    print_test_section("–¢–ï–°–¢ –ú–ï–ù–ï–î–ñ–ï–†–ê –û–¢–í–ï–¢–û–í", "üë®‚Äçüíº")

    # –¢–µ—Å—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    print("üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
    test_manager = ResponseManager(test_mode=True)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        start_time = time.time()
        test_manager.process_new_reviews()
        execution_time = time.time() - start_time

        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫")
        print("   ‚úÖ –õ–æ–≥–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –¢–µ—Å—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
        print("\nüîß –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)...")
        real_manager = ResponseManager(test_mode=False)
        print("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False

def test_rate_limiting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print_test_section("–¢–ï–°–¢ –û–ì–†–ê–ù–ò–ß–ò–¢–ï–õ–Ø –ó–ê–ü–†–û–°–û–í", "‚è±Ô∏è")

    from src.api.rate_limiter import RateLimiter

    try:
        limiter = RateLimiter(delay=0.1)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

        print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏...")

        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        for i in range(3):
            limiter.wait_if_needed()
            print(f"   üì® –ó–∞–ø—Ä–æ—Å {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω")

        total_time = time.time() - start_time

        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 0.2 —Å–µ–∫ (2 –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ 0.1 —Å–µ–∫)
        if total_time >= 0.2:
            print(f"   ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç: {total_time:.2f} —Å–µ–∫")
            return True
        else:
            print(f"   ‚ùå –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {total_time:.2f} —Å–µ–∫")
            return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print_test_section("–¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö", "üö®")

    ai = AIGenerator(test_mode=False)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    error_cases = [
        {
            "name": "–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤",
            "review": "",
            "rating": 5,
            "user_name": "–¢–µ—Å—Ç"
        },
        {
            "name": "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤",
            "review": "ok",
            "rating": 5,
            "user_name": "–¢–µ—Å—Ç"
        },
        {
            "name": "–û—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–∞–º–∏",
            "review": "5 5 5",
            "rating": 5,
            "user_name": "–¢–µ—Å—Ç"
        },
        {
            "name": "–û—Ç–∑—ã–≤ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
            "review": "!!! @@@ ### $$$",
            "rating": 3,
            "user_name": "–¢–µ—Å—Ç"
        }
    ]

    all_handled = True

    for case in error_cases:
        print(f"üîç {case['name']}...")

        try:
            response = ai.generate_reply(
                review_text=case['review'],
                product_name="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                rating=case['rating'],
                user_name=case['user_name']
            )

            if response and len(response.strip()) > 0:
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {response[:50]}...")
            else:
                print("   ‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –Ω–æ –±–µ–∑ –æ—à–∏–±–∫–∏")

        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            all_handled = False

    return all_handled

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print_test_section("–¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò", "‚ö°")

    ai = AIGenerator(test_mode=True)  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

    print("üèÉ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5 –æ—Ç–≤–µ—Ç–æ–≤...")

    start_time = time.time()

    for i in range(5):
        response = ai.generate_reply(
            review_text=f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {i}",
            product_name="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            rating=4,
            user_name="–¢–µ—Å—Ç"
        )
        print(f"   üìù –û—Ç–≤–µ—Ç {i+1}: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")

    total_time = time.time() - start_time
    avg_time = total_time / 5

    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   üïí –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
    print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫/–æ—Ç–≤–µ—Ç")

    if avg_time < 2.0:  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")
        return True
    else:
        print("   ‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ WILDBERRIES FEEDBACK BOT - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 70)
    print(f"üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)

    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", test_api_connection),
        ("–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤", test_rate_limiting),
        ("–ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", test_ai_generator),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤", test_review_processor),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤", test_response_manager),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", performance_test),
    ]

    results = []

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    for test_name, test_func in tests:
        try:
            print(f"\nüéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            result = test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)

    passed_tests = sum(1 for _, result in results if result)
    total_tests = len(results)

    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")

    print("\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
    for test_name, result in results:
        status_emoji = "‚úÖ" if result else "‚ùå"
        print(f"   {status_emoji} {test_name}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if passed_tests == total_tests:
        print("   üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("   üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    elif passed_tests >= total_tests * 0.7:
        print("   ‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    else:
        print("   ‚ùå –ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        print("   üõ†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

    print(f"\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if passed_tests == total_tests else 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
