#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ API Wildberries
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(__file__) + '/..')

try:
    from src.api.wb_client import WBAPIClient
    from src.ai.generator import AIGenerator
    from src.config.settings import settings
    print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

def print_section(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{title}")
    print("‚îÄ" * 50)

def check_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print_section("‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")

    try:
        wb_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if settings.WB_API_KEY and len(settings.WB_API_KEY) > 10 else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        supplier_status = "‚úÖ " + settings.SUPPLIER_ID if settings.SUPPLIER_ID else "‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        ai_provider = getattr(settings, 'AI_PROVIDER', 'fallback')
        if ai_provider == 'free':
            ai_status = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"
        elif ai_provider == 'russian':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            yandex_configured = hasattr(settings, 'YANDEX_API_KEY') and settings.YANDEX_API_KEY
            gigachat_configured = hasattr(settings, 'GIGACHAT_API_KEY') and settings.GIGACHAT_API_KEY

            if yandex_configured or gigachat_configured:
                providers = []
                if yandex_configured:
                    providers.append("Yandex GPT")
                if gigachat_configured:
                    providers.append("GigaChat")
                ai_status = f"üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ AI: {', '.join(providers)}"
            else:
                ai_status = "üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"
        else:
            ai_status = "üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"

        print(f"üîê WB API Key: {wb_status}")
        print(f"üè∑Ô∏è  Supplier ID: {supplier_status}")
        print(f"ü§ñ AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ai_status}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.CHECK_INTERVAL} –º–∏–Ω—É—Ç")
        print(f"üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {'‚úÖ –í–ö–õ' if settings.TEST_MODE else '‚úÖ –í–´–ö–õ'}")

        # –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å WB API –∫–ª—é—á
        return bool(settings.WB_API_KEY and len(settings.WB_API_KEY) > 10)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False
def check_wb_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Wildberries"""
    print_section("üåê API WILDBERRIES")

    client = WBAPIClient(test_mode=False)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
        has_unseen = client.has_unseen_feedbacks()
        print("   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = client.get_unanswered_count()

        unanswered_total = stats.get('countUnanswered', 0)
        unanswered_today = stats.get('countUnansweredToday', 0)
        avg_rating = stats.get('valuation', 'N/A')

        print(f"   üìà –í—Å–µ–≥–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {unanswered_total}")
        print(f"   üìÖ –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {unanswered_today}")
        print(f"   ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
        print("üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö...")
        result = client._make_request("GET", "new-feedbacks-questions")
        if not result.get("error"):
            data = result.get("data", {})
            has_feedbacks = data.get("hasNewFeedbacks", False)
            has_questions = data.get("hasNewQuestions", False)
            print(f"   üìù –ù–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {'‚úÖ –ï–°–¢–¨' if has_feedbacks else '‚ùå –ù–ï–¢'}")
            print(f"   ‚ùì –ù–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {'‚úÖ –ï–°–¢–¨' if has_questions else '‚ùå –ù–ï–¢'}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...")
        reviews = client.get_unanswered_reviews()
        print(f"   üìÑ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

        # –ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
        if reviews:
            print(f"\n   üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(3, len(reviews))} –æ—Ç–∑—ã–≤–∞:")
            for i, review in enumerate(reviews[:3], 1):
                rating_emojis = "‚≠ê" * review.rating
                print(f"      {i}. {rating_emojis} ({review.rating}/5)")
                print(f"         üë§ {review.user_name if review.user_name else '–ê–Ω–æ–Ω–∏–º'}")
                print(f"         üí¨ {review.text[:80]}{'...' if len(review.text) > 80 else ''}")
                if review.pros or review.cons:
                    if review.pros:
                        print(f"         üëç {review.pros}")
                    if review.cons:
                        print(f"         üëé {review.cons}")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def check_ai():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print_section("ü§ñ –ò–ò –ì–ï–ù–ï–†–ê–¢–û–†")

    try:
        from src.ai.generator import AIGenerator

        # –¢–µ—Å—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        print("üß™ –¢–µ—Å—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        test_ai = AIGenerator(test_mode=True)
        test_response = test_ai.generate_reply(
            review_text="–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!",
            product_name="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            rating=5,
            user_name="–ê–Ω–Ω–∞"
        )
        print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {test_response}")

        # –¢–µ—Å—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        print("üöÄ –¢–µ—Å—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        real_ai = AIGenerator(test_mode=False)
        real_response = real_ai.generate_reply(
            review_text="–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π!",
            product_name="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            rating=5,
            user_name="–ò–≤–∞–Ω"
        )
        print(f"   ‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {real_response}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if real_response and len(real_response.strip()) > 10:
            print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def check_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    print_section("üíª –°–ò–°–¢–ï–ú–ê")

    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    print(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –í–µ—Ä—Å–∏—è Python
    print(f"üêç –í–µ—Ä—Å–∏—è Python: {sys.version.split()[0]}")

    # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
    modules = ['requests', 'openai', 'schedule', 'dotenv']
    available_modules = []
    for module in modules:
        try:
            __import__(module)
            available_modules.append(f"‚úÖ {module}")
        except ImportError:
            available_modules.append(f"‚ùå {module}")

    print("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: " + ", ".join(available_modules))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dotenv —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("üîß python-dotenv: ‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"üîß python-dotenv: ‚ùå –æ—à–∏–±–∫–∞ - {e}")
        return False

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    print_section("ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê")

    try:
        from src.core.manager import ResponseManager

        # –¢–µ—Å—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        print("üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)...")
        test_manager = ResponseManager(test_mode=True)
        test_manager.process_new_reviews()
        print("   ‚úÖ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
        real_manager = ResponseManager(test_mode=False)
        print("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        print("\nüéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("   üìç –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("   üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: python check.py")
        print("   ‚è∏Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    print("üîç WILDBERRIES FEEDBACK BOT - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", check_settings),
        ("API Wildberries", check_wb_api),
        ("–ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", check_ai),
        ("–°–∏—Å—Ç–µ–º–∞", check_system),
        ("–ë–æ—Ç", check_bot_status)
    ]

    results = []

    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            results.append((check_name, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_section("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")

    successful_checks = sum(1 for _, result in results if result)
    total_checks = len(results)

    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {successful_checks}/{total_checks}")

    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–ê"
        print(f"   {status} - {check_name}")

    if successful_checks == total_checks:
        print("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ù–û–†–ú–ê–õ–¨–ù–û!")
        print("   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏")
    else:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {total_checks - successful_checks} –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")

    print("\nüí° –°–û–í–ï–¢–´:")
    print("   - –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: python main.py")
    print("   - –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python scripts/test_bot.py")
    print("   - –î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: python check.py")

if __name__ == "__main__":
    main()
